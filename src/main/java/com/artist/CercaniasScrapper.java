package com.artist;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public enum CercaniasScrapper implements TransportScheduleScrapper
{
    // Singleton instance
    INSTANCE;




    private static final String URL_PREFIX =
            "http://horarios.renfe.com/cer/hjcer300.jsp?cp=NO&i=s&NUCLEO=";
    private static final Integer TOO_MUCH_SECONDS = 60 * 60; // One hour




    /*


    http://horarios.renfe.com/cer/hjcer300.jsp?cp=NO&d=18000&df=20140227&hd=26&ho=00&i=s&nucleo=10&o=60200



cp	NO
d	18000
df	20140227
hd	26
ho	00
i	s
nucleo	10
o	60200




        NUCLEO=10
        origen
        o
        18000
        destino
        d
        70002
    fecha
    df
    20140303



        id: '20',
        name: 'Asturias',
        id: '50',
        name: 'Barcelona',
        id: '60',
        name: 'Bilbao',
        id: '31',
        name: 'Cádiz',
        id: '10',
        name: 'Madrid',
        id: '32',
        name: 'Málaga',
        id: '41',
        name: 'Múrcia/Alicante',
        id: '62',
        name: 'Santander',
        id: '61',
        name: 'San Sebastián',
        id: '30',
        name: 'Sevilla',
        id: '40',
        name: 'Valencia',
        id: '70',
        name: 'Zaragoza',
    }
     */

    @Override
    public Country getCountryId()
    {
        return Country.SPAIN;
    }

    @Override
    public Integer getCompanyId()
    {
        return null;  //TODO FCRES: Autogenerated, modify
    }

    @Override
    public List<Integer> retrieveLineETA(String lineName, String stopId)
    {
        //TODO fcres: Review this code
        final List<Integer> result = new ArrayList<Integer>();

        return result;
    }

    @Override
    public List<Integer> retrieveStopETAList(String stopId)
    {
        //TODO fcres: Review this code
        final List<Integer> result = new ArrayList<Integer>();

     /*   final List<ArrivalData> arrivalDatas = retrieveArrivalDataList();

        for (final ArrivalData arrivalData : arrivalDatas)
        {
                result.add(Integer.valueOf(arrivalData.getSecondsLeft()));
        }
                        */
        return result;
    }

    public List<ArrivalData> retrieveArrivalDataList()
    {


        List<ArrivalData> result = new ArrayList<ArrivalData>();

        String urlParameters = "nucleo=10&i=s&cp=NO&o=60200&d=18000&df=20140227&ho=00&hd=26&TXTInfo=";
        String request = "http://horarios.renfe.com/cer/hjcer300.jsp";


        final URL url;
        try
        {
            url = new URL(request);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            connection.setInstanceFollowRedirects(false);
            connection.setRequestMethod("POST");
           // connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
           // connection.setRequestProperty("charset", "utf-8");

           // connection.setRequestProperty("Cookie", "s_fid=7CB47103FC614781-3F91952C1B27AC02; s_nr=1393492363930-Repeat; s_cc=true; s_sq=%5B%5BB%5D%5D");




          //  connection.setRequestProperty("Content-Length", "" + Integer.toString(urlParameters.getBytes().length));



















            connection.setRequestProperty("Host", "horarios.renfe.com");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:27.0) Gecko/20100101 Firefox/27.0");
            connection.setRequestProperty("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
            connection.setRequestProperty("Accept-Language", "es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3");
//            connection.setRequestProperty("Accept-Encoding", "gzip, deflate");
            connection.setRequestProperty("Accept-Encoding", "deflate");
            connection.setRequestProperty("DNT", "0");
            connection.setRequestProperty("Referer", "http://horarios.renfe.com/cer/hjcer300.jsp?CP=NO&I=s&NUCLEO=10&o=18000&d=70002&df=20140303");
            connection.setRequestProperty("Cookie", "s_fid=7CB47103FC614781-3F91952C1B27AC02; s_nr=1393492363930-Repeat; s_cc=true; s_sq=%5B%5BB%5D%5D");
            connection.setRequestProperty("Connection", "keep-alive");











            connection.setUseCaches (false);

            DataOutputStream wr = new DataOutputStream(connection.getOutputStream ());
            wr.writeBytes(urlParameters);
            wr.flush();



            String line;
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }



            wr.close();
            connection.disconnect();
        } catch (MalformedURLException e)
        {
            e.printStackTrace();  //TODO FCRES: Autogenerated, modify
        } catch (ProtocolException e)
        {
            e.printStackTrace();  //TODO FCRES: Autogenerated, modify
        } catch (IOException e)
        {
            e.printStackTrace();  //TODO FCRES: Autogenerated, modify
        }




        /*



        try
        {
            URL url = new URL(request);
            URLConnection conn = null;
            conn = url.openConnection();
            conn.setDoOutput(true);

            OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream());

            writer.write(urlParameters);
            writer.flush();

            String line;
            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));

            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
            writer.close();
            reader.close();
        } catch (IOException e)
        {
            e.printStackTrace();  //TODO FCRES: Autogenerated, modify
        }

           */
        return result;
    }



    protected List<ArrivalData> retrieveRawData()
    {



        return parse("");
    }



    protected List<ArrivalData> parse (final String htmlDoc)
    {
        final List<ArrivalData> result = new ArrayList<ArrivalData>();

        final Document doc = Jsoup.parse(htmlDoc);

        // The data starts in the third row
        final Elements rows = doc.select("div#contenedor table tbody tr + tr + tr ");

        for (final Element row : rows)
        {
            final Elements columns = row.select("td");
            final Integer secondsLeft = computeSecondsLeft(columns.get(1).text());
            final boolean isTooMuchTime = ((secondsLeft != null) && (secondsLeft > TOO_MUCH_SECONDS));

            final ArrivalData arrivalData = new ArrivalData(columns.get(0).text(),
                                                            "stop",
                                                            "dest",
                                                            secondsLeft,
                                                            (secondsLeft == null),
                                                            isTooMuchTime);

            result.add(arrivalData);
        }

        return result;
    }

    private static Integer computeSecondsLeft(final String time)
    {

        Integer result = null;

        final SimpleDateFormat dateOnlyDateFormat = new SimpleDateFormat("dd/MM/yyyy ");
        final SimpleDateFormat completeDateFormat = new SimpleDateFormat("dd/MM/yyyy HH.mm");

        final Date now = new Date();

        StringBuilder currentDateString = new StringBuilder(dateOnlyDateFormat.format(now));
        currentDateString.append(time);

        try
        {
            final Date targetDate = completeDateFormat.parse(currentDateString.toString());
            result = getDifferenceInSeconds(now, targetDate);
        }
        catch (ParseException e)
        {

            //TODO fcres: ver que hacer con las excepciones



            e.printStackTrace();  //TODO FCRES: Autogenerated, modify
        }

        return result;
    }


    private static Integer getDifferenceInSeconds(final Date firstDate, final Date secondDate)
    {
        Integer result = null;

        final Long secondsLeft = (secondDate.getTime() - firstDate.getTime()) / 1000;

        if ((secondsLeft > 0) &&
                (secondsLeft < Integer.MAX_VALUE))
        {
            result = secondsLeft.intValue();
        }

        return result;
    }


}
