package com.artist.scrapper;

import com.artist.Country;
import com.artist.vo.ArrivalData;
import com.artist.vo.Stop;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public enum EMTMadridScrapper implements TransportScheduleScrapper
{
    // Singleton instance
    INSTANCE;



    private static final String EMTMADRID_WS_URL_PREFIX =
            "https://servicios.emtmadrid.es:8443/geo/servicegeo.asmx/getArriveStop?" +
                    "idClient=WEB.PORTALMOVIL.OTROS" +
                    "&passKey=0810DDE4-02FC-4C0E-A440-1BD171B397C8" +
                    "&statistics=medaigual" +
                    "&cultureInfo=medaigual" +
                    "&idStop=";

    @Override
    public Country getCountryId()
    {
        return Country.SPAIN;
    }

    @Override
    public Integer getCompanyId()
    {
        return null;  //TODO FCRES: Autogenerated, modify
    }

    @Override
    public List<Integer> retrieveLineETA(String lineName, String stopId)
    {
        final List<Integer> result = new ArrayList<Integer>();

        final List<ArrivalData> arrivalDatas = retrieveArrivalDataList();

        for (final ArrivalData arrivalData : arrivalDatas)
        {
            if (lineName.equals(arrivalData.getLineId()))
            {
                result.add(Integer.valueOf(arrivalData.getSecondsLeft()));
            }
        }

        return result;
    }

    @Override
    public List<Integer> retrieveStopETAList(String stopId)
    {
        final List<Integer> result = new ArrayList<Integer>();

        final List<ArrivalData> arrivalDatas = retrieveArrivalDataList();

        for (final ArrivalData arrivalData : arrivalDatas)
        {
                result.add(Integer.valueOf(arrivalData.getSecondsLeft()));
        }

        return result;
    }

    @Override
    public List<Stop> retrieveAllStops()
    {
        return null;  //TODO FCRES: Autogenerated, modify
    }

    public List<ArrivalData> retrieveArrivalDataList() {

        List<ArrivalData> result = Collections.emptyList();


        String url = EMTMADRID_WS_URL_PREFIX + "5442";

        Document dom;
        // Make an  instance of the DocumentBuilderFactory
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();

        try
        {
            DocumentBuilder db = dbf.newDocumentBuilder();
            dom = db.parse(url);
            final Element doc = dom.getDocumentElement();

            result = extractArrivalDataListFromXML(doc);
        }
        catch (ParserConfigurationException pce)
        {
            System.out.println(pce.getMessage());
        }
        catch (SAXException se)
        {
            System.out.println(se.getMessage());
        }
        catch (IOException ioe)
        {
            System.err.println(ioe.getMessage());
        }

        return result;
    }


    private List<ArrivalData> extractArrivalDataListFromXML(final Element doc)
    {

        List<ArrivalData> result = new ArrayList<ArrivalData>();

        final NodeList arriveNodeList = doc.getElementsByTagName("Arrive");


        for (int i = 0; i < arriveNodeList.getLength(); i++)
        {
            final NodeList childNodes1 = arriveNodeList.item(i).getChildNodes();

            String lineId = null;
            String stopId = null;
            String destinationName = null;
            String secondsLeft = null;
            Integer secondsLeftInt = null;

            for (int j = 0; j < childNodes1.getLength(); j++)
            {
                final Node currentItem = childNodes1.item(j);
                if (Node.ELEMENT_NODE == currentItem.getNodeType())
                {
                    final String nodeName = currentItem.getNodeName();
                    final String nodeValue = currentItem.getFirstChild().getNodeValue();


                    if ("IdStop".equals(nodeName))
                    {
                        stopId = nodeValue;
                    }
                    else if ("idLine".equals(nodeName))
                    {
                        lineId = nodeValue;
                    }
                    else if ("Destination".equals(nodeName))
                    {
                        destinationName = nodeValue;
                    }
                    else if ("TimeLeftBus".equals(nodeName))
                    {
                        secondsLeft = nodeValue;
                    }





                }
            }

            secondsLeftInt = Integer.parseInt(secondsLeft);
            //TODO fcres: hacer calculo real
            final boolean isTooMuchTime = false;

            result.add(
                    new ArrivalData(lineId,
                                    stopId,
                                    destinationName,
                                    secondsLeftInt,
                                    (secondsLeftInt == null),
                                    isTooMuchTime));
        }

        return result;

    }

}
