package com.artist.scrapper;

import com.artist.Country;
import com.artist.vo.ArrivalData;
import com.artist.vo.Stop;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public enum EMTMadridScrapper implements TransportScheduleScrapper
{
    // Singleton instance
    INSTANCE;



    private static final String EMTMADRID_WS_URL_PREFIX =
            "https://servicios.emtmadrid.es:8443/geo/servicegeo.asmx/getArriveStop?" +
                    "idClient=WEB.PORTALMOVIL.OTROS" +
                    "&passKey=0810DDE4-02FC-4C0E-A440-1BD171B397C8" +
                    "&statistics=medaigual" +
                    "&cultureInfo=medaigual" +
                    "&idStop=";

    @Override
    public ScrapperType getScrapperType()
    {
        return ScrapperType.START_AND_LINE;
    }

    @Override
    public Country getCountryId()
    {
        return Country.SPAIN;
    }

    @Override
    public String getServiceId()
    {
        return "EMT_MADRID";
    }

    @Override
    public String getServiceLabel()
    {
        return "EMT Madrid";
    }


    @Override
    public List<ArrivalData> retrieveBeginToEndETA(String beginStopId, String endStopId)
    {
        return Collections.emptyList();  //TODO FCRES: Autogenerated, modify
    }

    @Override
    public List<ArrivalData> retrieveBeginAndLinesETA(final String stopId, final List<String> lineIdList)
    {
        final Set<String> lineHash = new HashSet<String>(lineIdList);

        final String url = computeRequestUrl(stopId);
        final Document document = TSScrapperUtils.getJSoupXmlDocument(url);
        final List<RawData> rawData = retrieveRawData(document);
        final List<ArrivalData> arrivalDataList = retrieveArrivals(rawData);

        final Iterator<ArrivalData> arrivalDataIterator = arrivalDataList.iterator();

        while (arrivalDataIterator.hasNext()) {
            ArrivalData arrivalData = arrivalDataIterator.next();

            if (!lineHash.contains(arrivalData.getLineId()))
            {
                arrivalDataIterator.remove();
            }
        }

        return arrivalDataList;
   }

    @Override
    public List<Stop> retrieveAllStops()
    {
        return null;  //TODO FCRES: Autogenerated, modify
    }

    @Override
    public List<String> retrieveStopLines(String stopId)
    {
        final HashSet<String> result = new HashSet<String>();

        final String url = computeRequestUrl(stopId);
        final Document document = TSScrapperUtils.getJSoupXmlDocument(url);
        final List<RawData> rawData = retrieveRawData(document);

        for (final RawData data : rawData)
        {
            result.add(data.lineId);
        }

        return new ArrayList<String>(result);
    }

    private List<ArrivalData> retrieveArrivals(final List<RawData> rawDataList)
    {
        final List<ArrivalData> result = new ArrayList<ArrivalData>();

        for (final RawData rawData : rawDataList)
        {
            int secondsLeftInt = Integer.parseInt(rawData.timeLeft);
            //TODO fcres: hacer calculo real
            final boolean isTooMuchTime = false;

            //TODO fcres: rellenar bien
            final ArrivalData arrivalData = new ArrivalData(rawData.lineId,
                                                            "stopp",
                                                            "dest",
                                                            secondsLeftInt,
                                                            false,
                                                            isTooMuchTime);


            result.add(arrivalData);
        }

        return result;
    }

    private List<RawData> retrieveRawData(final Document document)
    {
        final List<RawData> result = new ArrayList<RawData>();

        final Elements arrives = document.select("Arrive");
        for (final Element arrive : arrives)
        {
            final RawData rawData =
                    new RawData(arrive.select("idLine").text(),
                                arrive.select("TimeLeftBus").text());
            result.add(rawData);
        }
        return result;
    }


    private String computeRequestUrl(final String stopId)
    {
        return EMTMADRID_WS_URL_PREFIX + stopId;
    }

    private class RawData
    {
        private String lineId;
        private String timeLeft;

        private RawData(String lineId, String timeLeft)
        {
            this.lineId = lineId;
            this.timeLeft = timeLeft;
        }
    }

}
